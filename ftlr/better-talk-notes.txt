1

2
The way I like to write up my CSS for responsive websites

3
  1
    Base: p font-size, link colors, link text-decoration (no id or class selectors go here, it's for your element defaults)
  2
    Layout: headers, footers, sidebars. blur your eyes. higher level containers, grid system
  3
    Module: calls to action, parts of forms, buttons. I try my best not to be page specific so these styles can work within any layout container or another module.
      Ex: if I have an aside.sass inside my modules directory, the aside can go on different pages and inside other containers by not being dependent on its parent container.
  4
    State: styling different states of a module by changing its class name via javascript
      Ex: an accordion can be in an expanded or collapsed state
      Ex: a nav link can have an .is-active state.
  5
    Theme: different colors / backgrounds. not necessary in all projects

4
how to name your classes according to which category from above it falls under.
try our best to name according to purpose rather than visual appearance.
we are styling that module the way it should be styled becuase that is how we want our call to actions to look, but this isn't as easy as it sounds.

5
look for visual patterns throughout your site or app becuase these repeating patterns get coded intro reusable css properties. Keep your code DRY, right? This is the reason for having modules and creating subsets of styles to be cast on certain elements

6
this is the most important!

7

8
This number three here is very important! Smacss really enforces the importance of not coupling your styles with HTML. This means your styles should ideally be context-free and should not rely on the structure of HTML. If in the future, we re-order a few elements on the site, we don't want a bunch of our styles to break because we targeted things based on how it was nested in the HTML document. Don't use location-based css selectors and I would always prefer class selectors over child selectors because child selectors are dependent on HTML structure. To be more clear on this, it means:

if I'm trying to target a link within a call to action that happens to be in an aside

I could probably do something like this:

9
but instead I would want to change it to something like this:
because then I could use the same styles on another call to action link even if it wasn't in an aside

10
and I think this is even better!
what is this you might ask?

11
I like to use BEM naming conventions, which was introduced by Yandex and stands for block element module.

12
TA-DA!
looks kinda weird when you see it at first, but once you get used to it, it is more telling of an element just by looking at the class itself. I don't go too crazy with this stuff, but when a submodule always belongs inside a certain module, I like to use this naming convention.

13
to show an example, say I have a nav and I want extra emphasis on the Sign Up link
the block would be
.main-nav{}

and each nav item could be
.main-nav__item with the Sign Up link being
.main-nav__item--signup

14
Build out, adding styles
rather than display none-ing as your screen width gets narrower. that's more lines of css for devices that may have slower connections

15
It might not seem like a big difference, but the first one would load lines of CSS that aren't going to be rendered by the browser. Also it would matter if the order of media queries were rearranged the first way. Media queries shouldn't overlap unless the styles nested under it should all be rendered.

16
As few undoing stylistic declarations as possible

For more info on this topic, check out Harry Robert's post at http://csswizardry.com/2012/11/code-smells-in-css/

I make good use of the :not() selector and nth-child recipes to help me avoid undoing style declarations like margin: 0; or padding: 0; declarations. I find that this makes future editing easier because declarations aren't competing / trumping with each other.
